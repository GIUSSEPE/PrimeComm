//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PrimeComm.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "12.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool IgnoreInternalName {
            get {
                return ((bool)(this["IgnoreInternalName"]));
            }
            set {
                this["IgnoreInternalName"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool ObfuscateVariables {
            get {
                return ((bool)(this["ObfuscateVariables"]));
            }
            set {
                this["ObfuscateVariables"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool RemoveComments {
            get {
                return ((bool)(this["RemoveComments"]));
            }
            set {
                this["RemoveComments"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool CompressSpaces {
            get {
                return ((bool)(this["CompressSpaces"]));
            }
            set {
                this["CompressSpaces"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("export (?<name>.*?)\\(")]
        public string RegexProgramName {
            get {
                return ((string)(this["RegexProgramName"]));
            }
            set {
                this["RegexProgramName"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool EnableAdditionalProgramProcessing {
            get {
                return ((bool)(this["EnableAdditionalProgramProcessing"]));
            }
            set {
                this["EnableAdditionalProgramProcessing"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool SkipConflictingProcessChecking {
            get {
                return ((bool)(this["SkipConflictingProcessChecking"]));
            }
            set {
                this["SkipConflictingProcessChecking"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool ImageMethodDimgrobOptimizeSimilar {
            get {
                return ((bool)(this["ImageMethodDimgrobOptimizeSimilar"]));
            }
            set {
                this["ImageMethodDimgrobOptimizeSimilar"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool ImageMethodDimgrobOptimizeBlacks {
            get {
                return ((bool)(this["ImageMethodDimgrobOptimizeBlacks"]));
            }
            set {
                this["ImageMethodDimgrobOptimizeBlacks"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("DimgrobPieces")]
        public global::PrimeLib.ImageProcessingMode ImageMethod {
            get {
                return ((global::PrimeLib.ImageProcessingMode)(this["ImageMethod"]));
            }
            set {
                this["ImageMethod"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("\"[^\"\"\\\\]*(?:\\\\.[^\"\"\\\\]*)*\"")]
        public string RegexStrings {
            get {
                return ((string)(this["RegexStrings"]));
            }
            set {
                this["RegexStrings"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("//.*")]
        public string RegexComments {
            get {
                return ((string)(this["RegexComments"]));
            }
            set {
                this["RegexComments"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?")]
        public string RegexBase64 {
            get {
                return ((string)(this["RegexBase64"]));
            }
            set {
                this["RegexBase64"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("([\"\'+/*-\\^@!:;,.?%=)(}{\\][|\\s])")]
        public string RegexOperators {
            get {
                return ((string)(this["RegexOperators"]));
            }
            set {
                this["RegexOperators"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("local (?<vars>.*?);")]
        public string RegexLocalVariables {
            get {
                return ((string)(this["RegexLocalVariables"]));
            }
            set {
                this["RegexLocalVariables"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("aa0")]
        public string VariableRefactoringStartingSeed {
            get {
                return ((string)(this["VariableRefactoringStartingSeed"]));
            }
            set {
                this["VariableRefactoringStartingSeed"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool SkipFullscreenWarning {
            get {
                return ((bool)(this["SkipFullscreenWarning"]));
            }
            set {
                this["SkipFullscreenWarning"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("EXPORT programName()\r\nBEGIN\r\n    %cursor%\r\nEND;\r\n")]
        public string ProgramTemplate {
            get {
                return ((string)(this["ProgramTemplate"]));
            }
            set {
                this["ProgramTemplate"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool AddCommentOnConversion {
            get {
                return ((bool)(this["AddCommentOnConversion"]));
            }
            set {
                this["AddCommentOnConversion"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("10")]
        public decimal EditorFontSize {
            get {
                return ((decimal)(this["EditorFontSize"]));
            }
            set {
                this["EditorFontSize"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("DitherTypeNone")]
        public global::PrimeLib.DitherType ImageDitheringMethod {
            get {
                return ((global::PrimeLib.DitherType)(this["ImageDitheringMethod"]));
            }
            set {
                this["ImageDitheringMethod"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Collections.Specialized.StringCollection RecentOpenedFiles {
            get {
                return ((global::System.Collections.Specialized.StringCollection)(this["RecentOpenedFiles"]));
            }
            set {
                this["RecentOpenedFiles"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("10")]
        public decimal RecentFilesMaximum {
            get {
                return ((decimal)(this["RecentFilesMaximum"]));
            }
            set {
                this["RecentFilesMaximum"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool EditorWordWrap {
            get {
                return ((bool)(this["EditorWordWrap"]));
            }
            set {
                this["EditorWordWrap"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool EditorMinimizesPrimeComm {
            get {
                return ((bool)(this["EditorMinimizesPrimeComm"]));
            }
            set {
                this["EditorMinimizesPrimeComm"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool EditorRestoresPrimeComm {
            get {
                return ((bool)(this["EditorRestoresPrimeComm"]));
            }
            set {
                this["EditorRestoresPrimeComm"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool HideAsNotificationIcon {
            get {
                return ((bool)(this["HideAsNotificationIcon"]));
            }
            set {
                this["HideAsNotificationIcon"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool CompressSpacesMore {
            get {
                return ((bool)(this["CompressSpacesMore"]));
            }
            set {
                this["CompressSpacesMore"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool EditorSearchReferenceTextChanged {
            get {
                return ((bool)(this["EditorSearchReferenceTextChanged"]));
            }
            set {
                this["EditorSearchReferenceTextChanged"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool EditorSearchReferenceSelectionChanged {
            get {
                return ((bool)(this["EditorSearchReferenceSelectionChanged"]));
            }
            set {
                this["EditorSearchReferenceSelectionChanged"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("# To customize the emulator command menu just\r\n# use the format:\r\n# <Menu text>=<" +
            "Command1>,<Command2>, ...\r\n#\r\n# Special Commands:\r\n#  {Show}: Show emulator (if " +
            "minimized)\r\n#  {Focus}: Select emulator window (if visible)\r\n#  {Selection}: Sel" +
            "ected text from PrimePad\r\n#  {Text}: Text from PrimePad\r\n#  {CopySelection}: Cop" +
            "y selected text\r\n#  {CopyText}: Copy text from PrimePad\r\n#  {Paste}: Paste copie" +
            "d text in emulator\r\n#  {Alert:<Text>}: Msgbox with <Text>\r\n#    This stops the c" +
            "ommand until OK\r\n#  {Question:<Text>}: Msgbox with OK/Cancel\r\n#    This stops th" +
            "e command on Cancel\r\n#  {Nop}/{Wait}: 1ms delay/100ms delay\r\n#  {ProgramName}: T" +
            "ypes current program name\r\n#  {RandomNumber}: Types a random 0-9 number\r\n#  {Ran" +
            "domChar}/{RandomCHAR}: Lower/upper random char\r\n#  \"string\": Any string\r\n\r\nCopy " +
            "all, open first Program, clear and paste=Escape,{CopyText},Escape,Escape,F1,Cont" +
            "rolKey,NumPad1,Enter,ControlKey,Escape,\"// \",{ProgramName},Enter,Enter,{Paste}\r\n" +
            "-=\r\nExecute all text in &CAS=Escape,Escape,Escape,F1,F1,F1,A,D,Enter,F7,{Text},E" +
            "nter\r\nCopy text and paste in CAS=Escape,{CopyText},Escape,Escape,F1,F1,F1,A,D,En" +
            "ter,F7,{Paste},Enter\r\nExecute &selection in CAS=Escape,Escape,Escape,F1,F1,F1,A," +
            "D,Enter,F7,{Selection},Enter\r\nCopy selection and paste in CAS=Escape,{CopySelect" +
            "ion},Escape,Escape,F1,F1,F1,A,D,Enter,F7,{Paste}\r\n-=\r\nExecute all text in &Home=" +
            "Escape,Escape,Escape,F1,F1,F1,A,D,Enter,F4,{Text},Enter\r\nCopy text and paste in " +
            "Home=Escape,{CopyText},Escape,Escape,F1,F1,F1,A,D,Enter,F4,{Paste},Enter\r\nExecut" +
            "e &selection in Home=Escape,Escape,Escape,F1,F1,F1,A,D,Enter,F4,{Selection},Ente" +
            "r\r\nCopy selection and paste in Home=Escape,{CopySelection},Escape,Escape,F1,F1,F" +
            "1,A,D,Enter,F4,{Paste}\r\n-=\r\nGoto &Apps (Main menu)=Escape,Escape,Escape,F1\r\nGoto" +
            " &Spreadsheet and type something=Escape,Escape,Escape,F1,S,P,R,Enter,Tab,NumPad0" +
            ",{Wait},ShiftKey,\"Hello\",Space,W,O,R,L,D,Enter\r\nGoto Program and delete all Prog" +
            "rams={Question:Do you really want to delete all the Programs?},Escape,Escape,Esc" +
            "ape,F1,ControlKey,NumPad1,ControlKey,Escape,Enter,Escape,ControlKey,NumPad1,Cont" +
            "rolKey,Escape,Enter,Escape,ControlKey,NumPad1,ControlKey,Escape,Enter\r\n-=\r\nSwitc" +
            "h to Emulator={Show},{Focus}\r\n#Show Emulator={Show}\r\n#Do nothing={Question:Are y" +
            "ou sure?},{Alert:Very well...},{Wait},{Wait},{Wait},{Wait},{Alert:Done!}")]
        public string EmulatorCommands {
            get {
                return ((string)(this["EmulatorCommands"]));
            }
            set {
                this["EmulatorCommands"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("4")]
        public decimal EditorIndentationSize {
            get {
                return ((decimal)(this["EditorIndentationSize"]));
            }
            set {
                this["EditorIndentationSize"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool EditorIndentationUseSpacesAsDefault {
            get {
                return ((bool)(this["EditorIndentationUseSpacesAsDefault"]));
            }
            set {
                this["EditorIndentationUseSpacesAsDefault"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("4")]
        public decimal EditorIndentationTabWidth {
            get {
                return ((decimal)(this["EditorIndentationTabWidth"]));
            }
            set {
                this["EditorIndentationTabWidth"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("30")]
        public decimal EditorMargin0 {
            get {
                return ((decimal)(this["EditorMargin0"]));
            }
            set {
                this["EditorMargin0"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string EditorPreferedFontFile {
            get {
                return ((string)(this["EditorPreferedFontFile"]));
            }
            set {
                this["EditorPreferedFontFile"] = value;
            }
        }
    }
}
